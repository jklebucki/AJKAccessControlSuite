@page "/signin"
@using AJKAccessControl.Shared.DTOs
@using AJKAccessGuard.Providers
@using AJKAccessGuard.Services
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel.DataAnnotations
@inject IUsersApiService UserApiService
@inject IUserStorageService UserStorageService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation


<EditForm Model="@loginModel" OnValidSubmit="@HandleLogin">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="signin-container">
        <h2>Zaloguj się</h2>
        <div class="form-group">
            <label for="email">Nazwa użytkownika:</label>
            <InputText id="email" class="form-control" @bind-Value="loginModel.UserName" />
            <ValidationMessage For="@(() => loginModel.UserName)" />
        </div>
        <div class="form-group">
            <label for="password">Hasło:</label>
            <InputText id="password" type="password" class="form-control" @bind-Value="loginModel.Password" />
            <ValidationMessage For="@(() => loginModel.Password)" />
        </div>
        <button type="submit" class="btn btn-primary">Zaloguj</button>
        @if (errors.Any())
        {
            <div class="alert alert-danger mt-3">
                <ul>
                    @foreach (var error in errors)
                    {
                        <li>@error</li>
                    }
                </ul>
            </div>
        }
    </div>
</EditForm>

@code {
    private LoginDto loginModel = new LoginDto();
    private List<string> errors = new List<string>();

    private async Task HandleLogin()
    {
        loginModel.UserName = loginModel.UserName.ToUpper();
        try
        {
            var tokenResult = await UserApiService.LoginUserAsync(loginModel);
            if (!tokenResult.Succeeded)
            {
                errors.Add("Błąd logowania!");
                return;
            }
            var userResult = await UserApiService.GetUserAsync(loginModel.UserName,tokenResult.Data!);
            if (!userResult.Succeeded)
            {
                errors.AddRange(userResult.Errors);
                return;
            }
            await UserStorageService.StoreTokenAsync(tokenResult.Data!);
            await UserStorageService.StoreUserAsync(userResult.Data!);
            var authProvider = AuthenticationStateProvider as CustomAuthenticationStateProvider;
            await authProvider!.NotifyUserAuthenticationAsync(tokenResult.Data!);
            Navigation.NavigateTo("/");
        }
        catch (Exception ex)
        {
            errors.Add("Błąd logowania!");
            errors.Add(ex.InnerException == null ? ex.Message : ex.InnerException.Message);
        }
    }
}
