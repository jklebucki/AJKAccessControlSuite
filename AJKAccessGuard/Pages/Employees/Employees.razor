@page "/employees"
@using AJKAccessControl.Shared.DTOs
@using AJKAccessGuard.Pages.SharedComponents
@using AJKAccessGuard.Services
@inject IPersonsApiService PersonsApiService
@inject IUserStorageService userStorage
@inject NavigationManager Navigation

@if (showEmployeeComponent)
{
    <div class="centered-container mb-3 mt-3">
        <h1 class="title-box">
            @(isEditMode ? "Edytuj pracownika" : "Dodaj pracownika")
        </h1>
    </div>
    <Employee OnCancel="Cancel" IsEditMode="isEditMode" Person="person" OnSave="HandleSave" OnCreate="HandleCreate" />
}
else
{
    <div class="centered-container mb-3 mt-3">
        <h1 class="title-box">
            Pracownicy
        </h1>
    </div>
    <button class="btn btn-outline-primary mb-3" @onclick="CreateNewEmployee">Dodaj pracownika</button>
    <table class="table table-striped table-hover">
        <thead class="table-dark">
            <tr>
                <th>Imię</th>
                <th>Nazwisko</th>
                <th>Czy pracownik</th>
                <th>Firma</th>
                <th>Akcje</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var employee in EmployeeList)
            {
                <tr>
                    <td>@employee.FirstName</td>
                    <td>@employee.LastName</td>
                    <td>
                        <span class="badge @(employee.IsEmployee ? "bg-success" : "bg-secondary")">
                            @(employee.IsEmployee ? "TAK" : "NIE")
                        </span>
                    </td>
                    <td>@employee.Company</td>
                    <td>
                        <button class="btn btn-outline-primary btn-sm" @onclick="() => EditEmployee(employee)">Edytuj</button>
                        <button class="btn btn-outline-danger btn-sm" @onclick="() => DeleteEmployee(employee.Id)">Usuń</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<Errors ErrorList="errors" />

@code {
    private List<PersonDTO> EmployeeList = new List<PersonDTO>();
    private PersonDTO person = new PersonDTO();
    private bool showEmployeeComponent = false;
    private bool isEditMode = false;
    private List<string> errors = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        await LoadEmployees();
    }

    private async Task LoadEmployees()
    {
        var token = await userStorage.GetTokenAsync();
        if (string.IsNullOrEmpty(token))
        {
            errors.Add("Brak dostępu do zasobów. Zaloguj się ponownie.");
            return;
        }

        var result = await PersonsApiService.GetAllPersonsAsync(token);
        if (result.Succeeded)
        {
            EmployeeList = result.Data.ToList();
        }
        else
        {
            errors.AddRange(result.Errors);
        }
    }

    private void CreateNewEmployee()
    {
        person = new PersonDTO();
        isEditMode = false;
        showEmployeeComponent = true;
    }

    private void EditEmployee(PersonDTO employee)
    {
        person = employee;
        isEditMode = true;
        showEmployeeComponent = true;
    }

    private async Task DeleteEmployee(int id)
    {
        errors.Clear();

        var token = await userStorage.GetTokenAsync();
        if (string.IsNullOrEmpty(token))
        {
            errors.Add("Brak dostępu do zasobów. Zaloguj się ponownie.");
            return;
        }

        var result = await PersonsApiService.DeletePersonAsync(id, token);
        if (result.Succeeded)
        {
            EmployeeList = EmployeeList.Where(e => e.Id != id).ToList();
        }
        else
        {
            errors.AddRange(result.Errors);
        }
    }

    private async Task HandleSave(PersonDTO employee)
    {
        errors.Clear();

        var token = await userStorage.GetTokenAsync();
        if (string.IsNullOrEmpty(token))
        {
            errors.Add("Brak dostępu do zasobów. Zaloguj się ponownie.");
            return;
        }

        var result = await PersonsApiService.UpdatePersonAsync(employee.Id, employee, token);
        if (result.Succeeded)
        {
            var index = EmployeeList.FindIndex(e => e.Id == employee.Id);
            if (index != -1)
            {
                EmployeeList[index] = employee;
            }
            showEmployeeComponent = false;
        }
        else
        {
            errors.AddRange(result.Errors);
        }
    }

    private async Task HandleCreate(PersonDTO employee)
    {
        errors.Clear();

        var token = await userStorage.GetTokenAsync();
        if (string.IsNullOrEmpty(token))
        {
            errors.Add("Brak dostępu do zasobów. Zaloguj się ponownie.");
            return;
        }

        var result = await PersonsApiService.AddPersonAsync(employee, token);
        if (result.Succeeded)
        {
            EmployeeList.Add(employee);
            showEmployeeComponent = false;
        }
        else
        {
            errors.AddRange(result.Errors);
        }
    }

    private void Cancel()
    {
        showEmployeeComponent = false;
    }
}
