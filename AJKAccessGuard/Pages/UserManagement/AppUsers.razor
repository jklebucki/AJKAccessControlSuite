@page "/app-users"
@using AJKAccessControl.Shared.DTOs
@using AJKAccessGuard.Services
@inject IUsersApiService api
@inject IUserStorageService userStorage
@inject NavigationManager NavigationManager
@inject IJSRuntime JS

<PageTitle>UserManagement</PageTitle>

<div class="centered-container">
    <h1 class="title-box">
        Zarządzanie użytkownikami
    </h1>
</div>
@if (errors.Any())
{
    <div class="alert alert-danger">
    <ul>
        @foreach (var error in errors)
            {
                <li>@error</li>
            }
        </ul>
    </div>
}
@switch (windowMode)
{
    case "list":
        <UsersList Users="users" AddUser="OpenCrateUserComponent" DeleteUser="OnDeleteUser" />
        break;
    case "add":
        <CreateUser Close="CloseCreateUserComponent" />
        break;
}

<div class="modal fade" id="deleteUserModal" tabindex="-1" aria-labelledby="deleteUserModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteUserModalLabel">Potwierdzenie usunięcia</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="HideDeleteUser"></button>
            </div>
            <div class="modal-body">
                Czy na pewno chcesz usunąć użytkownika @userToDelete?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="HideDeleteUser">Anuluj</button>
                <button type="button" class="btn btn-danger" @onclick="ConfirmDeleteUser">Usuń</button>
            </div>
        </div>
    </div>
</div>


@code {
    private string userToDelete = string.Empty;

    private List<UserDto> users = new List<UserDto>();
    private string windowMode = "list";
    private List<string> errors = new List<string>();

    private async Task ShowDeleteModal(string userName)
    {
        userToDelete = userName;
        await JS.InvokeVoidAsync("eval", "new bootstrap.Modal(document.getElementById('deleteUserModal')).show()");
    }

    private async Task HideDeleteUser()
    {
        await JS.InvokeVoidAsync("eval", "new bootstrap.Modal(document.getElementById('deleteUserModal')).hide()");
    }

    private async Task ConfirmDeleteUser()
    {
        await DeleteUser(userToDelete);
    }

    private void OpenCrateUserComponent()
    {
        windowMode = "add";
    }

    private async Task CloseCreateUserComponent(bool isSaved)
    {
        windowMode = "list";
        if (isSaved)
        {
            await GetUserList();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await GetUserList();
    }

    private async Task OnDeleteUser(string userName)
    {
        await ShowDeleteModal(userName);
    }

    private async Task DeleteUser(string userName)
    {
        var token = await userStorage.GetTokenAsync();
        if (string.IsNullOrEmpty(token))
        {
            NavigationManager.NavigateTo("/signin");
        }
        else
        {
            var userDto = users.FirstOrDefault(u => u.UserName == userName);
            if (userDto == null)
            {
                return;
            }
            var response = await api.DeleteUserAsync(userDto, token);
            if (response.Succeeded)
            {
                users.Remove(userDto);
            }
            else
            {
                errors.AddRange(response.Errors);
            }
        }
        await HideDeleteUser();
    }

    private async Task GetUserList()
    {
        var token = await userStorage.GetTokenAsync();
        if (string.IsNullOrEmpty(token))
        {
            NavigationManager.NavigateTo("/signin");
        }
        else
        {
            users = (await api.GetAllUsersAsync(token)).Data!.ToList();
        }
    }
}