@page "/app-users"
@using AJKAccessControl.Shared.DTOs
@using AJKAccessGuard.Services
@inject IUsersApiService api
@inject IUserStorageService userStorage
@inject NavigationManager NavigationManager

<PageTitle>UserManagement</PageTitle>

<div class="centered-container">
    <h1 class="title-box">
        Zarządzanie użytkownikami
    </h1>
</div>
@switch (windowMode)
{
    case "list":
        <UsersList Users="users" AddUser="OpenCrateUserComponent" />
        break;
    case "add":
        <CreateUser Close="CloseCreateUserComponent"/>
        break;
}

@code {
    private List<UserDto> users = new List<UserDto>();
    private string windowMode = "list";
    private void OpenCrateUserComponent()
    {
        windowMode = "add";
    }
    private async Task CloseCreateUserComponent(bool isSaved)
    {
        windowMode = "list";
        if (isSaved)
        {
            await GetUserList();
        }
    }
    
    protected override async Task OnInitializedAsync()
    {
        await GetUserList();
    }

    private async Task GetUserList()
    {
        var token = await userStorage.GetTokenAsync();
        if (string.IsNullOrEmpty(token))
        {
            NavigationManager.NavigateTo("/signin");
        }
        else
        {
            users = (await api.GetAllUsersAsync(token)).Data!.ToList();
        }
    }
}