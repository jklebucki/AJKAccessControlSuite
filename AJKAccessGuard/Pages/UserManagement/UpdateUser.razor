@page "/update-user/{UserName}"
@using AJKAccessControl.Shared.DTOs
@using AJKAccessGuard.Services
@using AJKAccessGuard.Pages.SharedComponents
@inject IUsersApiService api
@inject IUserStorageService userStorage
@inject NavigationManager navigationManager

<div class="update-user-form">
    <h3>Aktualizuj użytkownika</h3>
    <EditForm Model="existingUser" OnSubmit="OnUpdateUser">
        <DataAnnotationsValidator />

        <div class="form-group">
            <label for="email">Email:</label>
            <InputText id="email" @bind-Value="existingUser.Email" class="form-control modern-input" />
            <ValidationMessage For="@(() => existingUser.Email)" />
        </div>

        <div class="form-group">
            <label for="phoneNumber">Numer telefonu:</label>
            <InputText id="phoneNumber" @bind-Value="existingUser.PhoneNumber" class="form-control modern-input" />
            <ValidationMessage For="@(() => existingUser.PhoneNumber)" />
        </div>

        <div class="form-group">
            <label for="firstName">Imię:</label>
            <InputText id="firstName" @bind-Value="existingUser.FirstName" class="form-control modern-input" />
            <ValidationMessage For="@(() => existingUser.FirstName)" />
        </div>

        <div class="form-group">
            <label for="lastName">Nazwisko:</label>
            <InputText id="lastName" @bind-Value="existingUser.LastName" class="form-control modern-input" />
            <ValidationMessage For="@(() => existingUser.LastName)" />
        </div>
        <div>
            <p>Obecne role:</p>
            @foreach (var role in existingUser.Roles)
            {
                <div><span class="badge bg-primary">@role</span></div>
            }
        </div>
        <div class="form-group">
            <label for="roles">Role:</label>
            <select id="roles" @onchange="OnSelectionChanged" class="form-select modern-input" multiple>
                @foreach (var role in availableRoles)
                {
                    <option value="@role">@role</option>
                }
            </select>
            <ValidationMessage For="@(() => existingUser.Roles)" />
        </div>

        <div class="form-group d-flex justify-content-between mt-3">
            <button type="submit" class="btn btn-outline-primary btn-form">Aktualizuj</button>
            <button type="button" class="btn btn-outline-secondary btn-form" @onclick="OnClose">Anuluj</button>
        </div>
    </EditForm>
    <Errors ErrorList="errors" />
</div>

@code {
    [Parameter]
    public string UserName { get; set; } = string.Empty;
    [Parameter]
    public EventCallback<bool> Close { get; set; }
    private UpdateUserDto existingUser = new UpdateUserDto();
    private List<string> errors = new List<string>();
    private List<string> availableRoles = new List<string> { "Admin", "Supervisor", "User" };

    protected override async Task OnInitializedAsync()
    {
        await LoadUserData();
    }

    private void OnSelectionChanged(ChangeEventArgs e)
    {
        var selected = new List<string>();

        var selectedValues = (IEnumerable<string>)e.Value;
        foreach (var value in selectedValues)
        {
            selected.Add(value);
        }

        existingUser.Roles = selected;
    }

    private async Task LoadUserData()
    {
        var token = await userStorage.GetTokenAsync();
        if (string.IsNullOrEmpty(token))
        {
            errors.Add("Brak dostępu do zasobów. Zaloguj się ponownie.");
            return;
        }

        var userResult = await api.GetUserAsync(UserName, token);
        if (userResult != null)
        {
            if (userResult.Succeeded)
            {
                var userDto = userResult.Data;
                if (userDto == null)
                {
                    errors.Add("Nie znaleziono użytkownika.");
                    return;
                }
                existingUser = new UpdateUserDto
                    {
                        Email = userDto.Email ?? string.Empty,
                        PhoneNumber = userDto.PhoneNumber,
                        FirstName = userDto.FirstName,
                        LastName = userDto.LastName,
                        Roles = userDto.Roles
                    };
            }
            else
            {
                errors.AddRange(userResult.Errors);
            }
        }
        else
        {
            errors.Add("Nie znaleziono użytkownika.");
        }
    }

    private async Task OnUpdateUser()
    {
        errors.Clear();

        var token = await userStorage.GetTokenAsync();
        if (string.IsNullOrEmpty(token))
        {
            errors.Add("Brak dostępu do zasobów. Zaloguj się ponownie.");
            return;
        }

        var result = await api.UpdateUserAsync(UserName, existingUser, token);
        if (result.Succeeded)
        {
            await Close.InvokeAsync(true);
        }
        else
        {
            errors.AddRange(result.Errors);
        }
    }

    private async Task OnClose()
    {
        await Close.InvokeAsync(false);
    }
}