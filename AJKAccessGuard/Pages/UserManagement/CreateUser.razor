@using AJKAccessControl.Shared.DTOs
@using System.Reflection.Metadata
@using AJKAccessGuard.Pages.SharedComponents
@using AJKAccessGuard.Services
@inject IUsersApiService api
@inject IUserStorageService userStorage

<div class="create-user-form">
    <h3>Utwórz użytkownika</h3>
    <EditForm Model="newUser" OnValidSubmit="OnCreateUser">
        <DataAnnotationsValidator />
        <div class="form-group">
            <label for="userName">Nazwa użytkownika:</label>
            <InputText id="userName" @bind-Value="newUser.UserName" class="form-control modern-input" />
            <ValidationMessage For="@(() => newUser.UserName)" />
        </div>
        <div class="form-group">
            <label for="email">Email:</label>
            <InputText id="email" @bind-Value="newUser.Email" class="form-control modern-input" />
            <ValidationMessage For="@(() => newUser.Email)" />
        </div>

        <div class="form-group">
            <label for="phoneNumber">Numer telefonu:</label>
            <InputText id="phoneNumber" @bind-Value="newUser.PhoneNumber" class="form-control modern-input" />
            <ValidationMessage For="@(() => newUser.PhoneNumber)" />
        </div>

        <div class="form-group">
            <label for="password">Hasło:</label>
            <div class="input-group">
                <InputText id="password" @bind-Value="newUser.Password" type="password" class="form-control modern-input" />
                @if (!isPasswordVisible)
                {
                    <button type="button" class="btn btn-outline-secondary" @onclick="TogglePasswordVisibility"><span class="icon-eye" /></button>
                }
                else
                {
                    <button type="button" class="btn btn-outline-secondary" @onclick="TogglePasswordVisibility"><span class="icon-eye-slash" /></button>
                }
            </div>
            <ValidationMessage For="@(() => newUser.Password)" />
        </div>

        <div class="form-group">
            <label for="confirmPassword">Powtórz hasło:</label>
            <div class="input-group">
                <InputText id="confirmPassword" @bind-Value="confirmPassword" type="password" class="form-control modern-input" />
                @if (!isPasswordVisible)
                {
                    <button type="button" class="btn btn-outline-secondary" @onclick="TogglePasswordVisibility"><span class="icon-eye" /></button>
                }
                else
                {
                    <button type="button" class="btn btn-outline-secondary" @onclick="TogglePasswordVisibility"><span class="icon-eye-slash" /></button>
                }
            </div>
        </div>

        <div class="form-group">
            <label for="firstName">Imię:</label>
            <InputText id="firstName" @bind-Value="newUser.FirstName" class="form-control modern-input" />
            <ValidationMessage For="@(() => newUser.FirstName)" />
        </div>

        <div class="form-group">
            <label for="lastName">Nazwisko:</label>
            <InputText id="lastName" @bind-Value="newUser.LastName" class="form-control modern-input" />
            <ValidationMessage For="@(() => newUser.LastName)" />
        </div>

        <div class="form-group">
            <label for="role">Rola:</label>
            <InputSelect id="role" @bind-Value="newUser.Role" class="form-select modern-input">
                <option value="">Wybierz rolę</option>
                <option value="Admin">Admin</option>
                <option value="Supervisor">Supervisor</option>
                <option value="User">User</option>
            </InputSelect>
            <ValidationMessage For="@(() => newUser.Role)" />
        </div>

        <div class="form-group d-flex justify-content-between mt-3">
            <button type="submit" class="btn btn-outline-primary btn-form">Dodaj</button>
            <button type="button" class="btn btn-outline-secondary btn-form" @onclick="OnClose">Anuluj</button>
        </div>
    </EditForm>
    <Errors ErrorList="errors" />
</div>

@inject IJSRuntime JS

@code {
    [Parameter]
    public EventCallback<bool> Close { get; set; }
    private RegisterUserDto newUser = new RegisterUserDto();
    private bool isPasswordVisible = false;
    private string? confirmPassword;
    private List<string> errors = new List<string>();

    private async Task OnClose()
    {
        await Close.InvokeAsync(false);
    }

    private async Task<string> ReturnTokenIfAvailableAsync()
    {
        var token = await userStorage.GetTokenAsync();
        if (string.IsNullOrEmpty(token))
        {
            errors.Add("Brak dostępu do zasobów. Zaloguj się ponownie.");
            return string.Empty;
        }
        return token;
    }
    private async Task OnCreateUser()
    {
        errors.Clear();
        if (string.IsNullOrEmpty(await ReturnTokenIfAvailableAsync()))
            return;

        if (newUser.Password != confirmPassword)
        {
            errors.Add("Hasła nie są zgodne.");
            return;
        }
        await CreateUserRequest();
    }

    private async Task CreateUserRequest()
    {
        var token = await ReturnTokenIfAvailableAsync();
        if (string.IsNullOrEmpty(token))
            return;
        else
        {
            var result = await api.RegisterUserAsync(newUser, token);
            if (result.Succeeded)
            {
                await Close.InvokeAsync(true);
            }
            else
            {
                errors.AddRange(result.Errors);
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await ChangeEyeIcon();
        }
    }

    private async Task TogglePasswordVisibility()
    {
        await ChangeEyeIcon();
        isPasswordVisible = !isPasswordVisible;
    }

    private async Task ChangeEyeIcon()
    {
        var passwordInput = await JS.InvokeAsync<IJSObjectReference>("document.getElementById", "password");
        var confirmPasswordInput = await JS.InvokeAsync<IJSObjectReference>("document.getElementById", "confirmPassword");
        if (passwordInput != null && confirmPasswordInput != null)
        {
            await passwordInput.InvokeVoidAsync("setAttribute", "type", isPasswordVisible ? "text" : "password");
            await confirmPasswordInput.InvokeVoidAsync("setAttribute", "type", isPasswordVisible ? "text" : "password");
        }
    }
}