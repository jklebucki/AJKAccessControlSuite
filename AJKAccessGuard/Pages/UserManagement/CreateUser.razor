@using AJKAccessControl.Shared.DTOs
@using System.Reflection.Metadata
@using AJKAccessGuard.Services
@inject IUsersApiService api
@inject IUserStorageService userStorage

<div class="create-user-form">
    <h3>Utwórz użytkownika</h3>
    <EditForm Model="newUser" OnValidSubmit="OnCreateUser">
        <DataAnnotationsValidator />
        <div class="form-group">
            <label for="email">Nazwa użytkownika:</label>
            <InputText id="email" @bind-Value="newUser.UserName" class="form-control modern-input" />
            <ValidationMessage For="@(() => newUser.UserName)" />
        </div>
        <div class="form-group">
            <label for="email">Email:</label>
            <InputText id="email" @bind-Value="newUser.Email" class="form-control modern-input" />
            <ValidationMessage For="@(() => newUser.Email)" />
        </div>

        <div class="form-group">
            <label for="phoneNumber">Numer telefonu:</label>
            <InputText id="phoneNumber" @bind-Value="newUser.PhoneNumber" class="form-control modern-input" />
            <ValidationMessage For="@(() => newUser.PhoneNumber)" />
        </div>

        <div class="form-group">
            <label for="password">Hasło:</label>
            <div class="input-group">
                <InputText id="password" @bind-Value="newUser.Password" type="password" class="form-control modern-input" />
                @if (!isPasswordVisible)
                {
                    <button type="button" class="btn btn-outline-secondary" @onclick="TogglePasswordVisibility">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-eye" viewBox="0 0 16 16">
                            <path d="M16 8s-3-5.5-8-5.5S0 8 0 8s3 5.5 8 5.5S16 8 16 8M1.173 8a13 13 0 0 1 1.66-2.043C4.12 4.668 5.88 3.5 8 3.5s3.879 1.168 5.168 2.457A13 13 0 0 1 14.828 8q-.086.13-.195.288c-.335.48-.83 1.12-1.465 1.755C11.879 11.332 10.119 12.5 8 12.5s-3.879-1.168-5.168-2.457A13 13 0 0 1 1.172 8z" />
                            <path d="M8 5.5a2.5 2.5 0 1 0 0 5 2.5 2.5 0 0 0 0-5M4.5 8a3.5 3.5 0 1 1 7 0 3.5 3.5 0 0 1-7 0" />
                        </svg>
                    </button>
                }
                else
                {
                    <button type="button" class="btn btn-outline-secondary" @onclick="TogglePasswordVisibility">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-eye-slash" viewBox="0 0 16 16">
                            <path d="M13.359 11.238C15.06 9.72 16 8 16 8s-3-5.5-8-5.5a7 7 0 0 0-2.79.588l.77.771A6 6 0 0 1 8 3.5c2.12 0 3.879 1.168 5.168 2.457A13 13 0 0 1 14.828 8q-.086.13-.195.288c-.335.48-.83 1.12-1.465 1.755q-.247.248-.517.486z" />
                            <path d="M11.297 9.176a3.5 3.5 0 0 0-4.474-4.474l.823.823a2.5 2.5 0 0 1 2.829 2.829zm-2.943 1.299.822.822a3.5 3.5 0 0 1-4.474-4.474l.823.823a2.5 2.5 0 0 0 2.829 2.829" />
                            <path d="M3.35 5.47q-.27.24-.518.487A13 13 0 0 0 1.172 8l.195.288c.335.48.83 1.12 1.465 1.755C4.121 11.332 5.881 12.5 8 12.5c.716 0 1.39-.133 2.02-.36l.77.772A7 7 0 0 1 8 13.5C3 13.5 0 8 0 8s.939-1.721 2.641-3.238l.708.709zm10.296 8.884-12-12 .708-.708 12 12z" />
                        </svg>
                    </button>
                }
            </div>
            <ValidationMessage For="@(() => newUser.Password)" />
        </div>

        <div class="form-group">
            <label for="confirmPassword">Powtórz hasło:</label>
            <div class="input-group">
                <InputText id="confirmPassword" @bind-Value="confirmPassword" type="password" class="form-control modern-input" />
                @if (!isPasswordVisible)
                {
                    <button type="button" class="btn btn-outline-secondary" @onclick="TogglePasswordVisibility">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-eye" viewBox="0 0 16 16">
                            <path d="M16 8s-3-5.5-8-5.5S0 8 0 8s3 5.5 8 5.5S16 8 16 8M1.173 8a13 13 0 0 1 1.66-2.043C4.12 4.668 5.88 3.5 8 3.5s3.879 1.168 5.168 2.457A13 13 0 0 1 14.828 8q-.086.13-.195.288c-.335.48-.83 1.12-1.465 1.755C11.879 11.332 10.119 12.5 8 12.5s-3.879-1.168-5.168-2.457A13 13 0 0 1 1.172 8z" />
                            <path d="M8 5.5a2.5 2.5 0 1 0 0 5 2.5 2.5 0 0 0 0-5M4.5 8a3.5 3.5 0 1 1 7 0 3.5 3.5 0 0 1-7 0" />
                        </svg>
                    </button>
                }
                else
                {
                    <button type="button" class="btn btn-outline-secondary" @onclick="TogglePasswordVisibility">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-eye-slash" viewBox="0 0 16 16">
                            <path d="M13.359 11.238C15.06 9.72 16 8 16 8s-3-5.5-8-5.5a7 7 0 0 0-2.79.588l.77.771A6 6 0 0 1 8 3.5c2.12 0 3.879 1.168 5.168 2.457A13 13 0 0 1 14.828 8q-.086.13-.195.288c-.335.48-.83 1.12-1.465 1.755q-.247.248-.517.486z" />
                            <path d="M11.297 9.176a3.5 3.5 0 0 0-4.474-4.474l.823.823a2.5 2.5 0 0 1 2.829 2.829zm-2.943 1.299.822.822a3.5 3.5 0 0 1-4.474-4.474l.823.823a2.5 2.5 0 0 0 2.829 2.829" />
                            <path d="M3.35 5.47q-.27.24-.518.487A13 13 0 0 0 1.172 8l.195.288c.335.48.83 1.12 1.465 1.755C4.121 11.332 5.881 12.5 8 12.5c.716 0 1.39-.133 2.02-.36l.77.772A7 7 0 0 1 8 13.5C3 13.5 0 8 0 8s.939-1.721 2.641-3.238l.708.709zm10.296 8.884-12-12 .708-.708 12 12z" />
                        </svg>
                    </button>
                }
            </div>
        </div>

        <div class="form-group">
            <label for="firstName">Imię:</label>
            <InputText id="firstName" @bind-Value="newUser.FirstName" class="form-control modern-input" />
            <ValidationMessage For="@(() => newUser.FirstName)" />
        </div>

        <div class="form-group">
            <label for="lastName">Nazwisko:</label>
            <InputText id="lastName" @bind-Value="newUser.LastName" class="form-control modern-input" />
            <ValidationMessage For="@(() => newUser.LastName)" />
        </div>

        <div class="form-group d-flex justify-content-between mt-3">
            <button type="submit" class="btn btn-outline-primary btn-form">Dodaj</button>
            <button type="button" class="btn btn-outline-secondary btn-form" @onclick="OnClose">Anuluj</button>
        </div>
    </EditForm>

    @if (errors.Any())
    {
        <div class="alert alert-danger mt-3">
            <ul>
                @foreach (var error in errors)
                {
                    <li>@error</li>
                }
            </ul>
        </div>
    }
</div>

@inject IJSRuntime JS

@code {
    [Parameter]
    public EventCallback<bool> Close { get; set; }
    private RegisterUserDto newUser = new RegisterUserDto();
    private bool isPasswordVisible = false;
    private string? confirmPassword;
    private List<string> errors = new List<string>();

    private async Task OnClose()
    {
        await Close.InvokeAsync(false);
    }

    private async Task OnCreateUser()
    {
        errors.Clear();
        if (newUser.Password != confirmPassword)
        {
            errors.Add("Hasła nie są zgodne.");
            return;
        }
        await CreateUserRequest();
    }

    private async Task CreateUserRequest()
    {
        var token = await userStorage.GetTokenAsync();
        if (string.IsNullOrEmpty(token))
        {
            errors.Add("Brak dostępu do zasobów. Zaloguj się ponownie.");
        }
        else
        {
            var result = await api.RegisterUserAsync(newUser, token);
            if (result.Succeeded)
            {
                await Close.InvokeAsync(true);
            }
            else
            {
                errors.AddRange(result.Errors);
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await ChangeEyeIcon();
        }
    }

    private async Task TogglePasswordVisibility()
    {
        await ChangeEyeIcon();
        isPasswordVisible = !isPasswordVisible;
    }

    private async Task ChangeEyeIcon()
    {
        var passwordInput = await JS.InvokeAsync<IJSObjectReference>("document.getElementById", "password");
        var confirmPasswordInput = await JS.InvokeAsync<IJSObjectReference>("document.getElementById", "confirmPassword");
        if (passwordInput != null && confirmPasswordInput != null)
        {
            await passwordInput.InvokeVoidAsync("setAttribute", "type", isPasswordVisible ? "text" : "password");
            await confirmPasswordInput.InvokeVoidAsync("setAttribute", "type", isPasswordVisible ? "text" : "password");
        }
    }
}