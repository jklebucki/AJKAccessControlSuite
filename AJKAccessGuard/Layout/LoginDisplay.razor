@using AJKAccessControl.Shared.DTOs
@using AJKAccessGuard.Providers
@using AJKAccessGuard.Services
@using Microsoft.AspNetCore.Components.Authorization
@inject IUserStorageService userStorage

@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
<CascadingAuthenticationState>
    <AuthorizeView>
        <Authorized>
            Witaj, @userDto.FirstName @userDto.LastName
            <button class="nav-link btn btn-link" @onclick="BeginLogOut">Log out</button>
        </Authorized>
        <NotAuthorized>
            <a href="/signin">Log in</a>
        </NotAuthorized>
    </AuthorizeView>
</CascadingAuthenticationState>

@code {
    private UserDto userDto = new UserDto();
    protected override async Task OnInitializedAsync()
    {
        AuthenticationStateProvider.AuthenticationStateChanged += OnAuthenticationStateChanged;
        userDto = await userStorage.GetUserAsync();
        await Task.CompletedTask;
    }

    private async void OnAuthenticationStateChanged(Task<AuthenticationState> task)
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (!user.Identity!.IsAuthenticated)
        {
            NavigationManager.NavigateTo("/");
        } else
        {
            userDto = await userStorage.GetUserAsync();
        }
    }

    public void BeginLogOut()
    {
        var customProvider = AuthenticationStateProvider as CustomAuthenticationStateProvider;
        if (customProvider != null)
        {
            customProvider.NotifyUserLogoutAsync();
        }
    }
}
